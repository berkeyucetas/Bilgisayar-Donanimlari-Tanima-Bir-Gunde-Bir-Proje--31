<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox8.Text" xml:space="preserve">
    <value>Soğutma Sistemleri Nedir?
En basit anlatımı ile soğutucu fan, bilgisayarınızın içerisinde bulunan soğuk havanın tüm alana yayılmasını sağlayan cihazlara verilen isim olarak tanımlanabiliyor. Bu fan sayesinde bilgisayarınızın havalandırma ızgaralarından giren hava, tüm bilgisayarın içerisine yayılıyor ve en ücra köşede bile olan parçaların soğumasına yardımcı oluyor.</value>
  </data>
  <data name="textBox1.Text" xml:space="preserve">
    <value>Anakart Nedir?
Bir bilgisayarda, donanım ile işlemci arasındaki iskelet olan anakart, bilgisayarın önemli parçalarından biridir. Güç kaynağı ile bilgisayar arasındaki enerjinin iletimini sağlayan anakart; ekran kart entegresinin yanı sıra bellek ve depolama modülleri arasındaki bağlantıyı da gerçekleştirmektedir. Yapısal olarak bir bilgisayarın anakart modeli, plaka üzerinde yonga ve devrelerin yer aldığı bir mimariye sahiptir. Anakart bileşenleri arasındaki iş akışının organize edildiği bu yonga seti mimarisi CPU, GPU, RAM ve ekran gibi modüller için bağlantı sunan bir devre kartıdır.</value>
  </data>
  <data name="textBox2.Text" xml:space="preserve">
    <value>İşlemci Nedir?
İşlemci, bir teknolojik cihazın temel bileşeni olarak kritik öneme sahip olsa da, yalnızca diğer donanımlarla birlikte çalışabiliyor. İşlemcilerin oluşturulması için milyarlarca transistör kullanılıyor. Mikroskobik boyutlardaki bu transistör bir bilgisayar çipine yerleştirilerek işlemci ortaya çıkartılıyor. Bu transistörler, sisteminizin belleğinde depolanan programları çalıştırmak için ihtiyaç duyduğu hesaplamaları yapmasına izin veriyor.
</value>
  </data>
  <data name="textBox3.Text" xml:space="preserve">
    <value>Ekran Kartı Nedir?
Ekran kartı, tümgörüntülerin bilgisayar ekranı, yani monitöre yansımasına yardımcı olan bir üründür. Tamamen bilgisayarın görüntü kalitesi ile ilgilidir. Görüntülerin hepsi, ekran ve ekran kartına bağlı olarak, değişiklik gösterir. Bu yüzden mümkün olduğunca, kaliteli bir seçim yapmak gerekir. Ekran kartı, grafik kartı ismini de alır. Resim, video, grafik ve yazıların oluşmasını sağlar, işlemci ve monitörlerle birlikte görev yapan bir malzemedir.</value>
  </data>
  <data name="textBox4.Text" xml:space="preserve">
    <value>RAM nedir?
RAM bilgisayarın kısa süreli hafıza görevini üstlenen, oldukça hızlı bir bileşendir. RAM içerisinde anlık olarak veriler depolanır. Geçici olarak depolanan veriler, işlendikten sonra gerekli bileşene gönderildiği anda silinir. Silinen verilerin yerine ihtiyaç duyulan yeni veriler getirilir. Cihaz üzerinde yapılan her bir işlemde bu döngü tekrarlanır.</value>
  </data>
  <data name="textBox5.Text" xml:space="preserve">
    <value>SSD nedir?
SSD'ler sabit disklerin yerini alan ve onlardan daha hızlı, kompakt ve güvenli veri depolama aygıtlarıdır. SSD, klasik hard disklerdeki bir motorun çalıştırdığı mekanik plakaların yerine tamamen bellek yongaları kullanır. Bu durumun getirdiği en önemli avantaj, SSD'lerin çok daha hızlı olmasıdır. SSD, işletim sistemlerinin daha hızlı açılmasını; aynı zamanda pek çok uygulama ve işlemin daha hızlı başlamasını sağlarken, veri kopyalama ve taşıma işlemlerini de önemli ölçüde hızlandırır.</value>
  </data>
  <data name="textBox6.Text" xml:space="preserve">
    <value>Harddisk nedir?
Harddisk, bilgisayara bağlanabilen ve bilgisayara yüklenen bilgilerin saklanarak depolandığı bir donanımdır. Temel amacı, verileri yazmak ve okumaktır. Hızları ve kapasiteleri sayesinde bilgisayarın hayatını kurtarırlar. Zira harddiski olmayan bir bilgisayar, benzin deposu olmayan bir araba gibidir.</value>
  </data>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>